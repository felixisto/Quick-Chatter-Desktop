/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quickchatter.ui.view;

import quickchatter.ui.view.other.FileSystemEntitiesTableRenderer;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import org.jetbrains.annotations.NotNull;
import filesystem.model.EntityInfo;
import quickchatter.ui.TextValue;
import quickchatter.ui.listdata.FileSystemEntitiesTableData;
import quickchatter.ui.listdata.JTableData;
import quickchatter.ui.viewmodel.FileSystemEntityViewModel;
import utilities.Callback;
import utilities.SimpleCallback;

public class FilePickerFrame extends javax.swing.JFrame implements BaseView.Whole {
    public static final @NotNull String FOLDER_ICON_PATH = "folderIcon.png";
    public static final @NotNull String FILE_ICON_PATH = "fileIcon.png";
    public static final @NotNull String ROOT_PATH = "Root";
    
    // Callbacks
    public @NotNull SimpleCallback onQuitClick = SimpleCallback.createDoNothing();
    public @NotNull SimpleCallback onBackClick = SimpleCallback.createDoNothing();
    public @NotNull Callback<Integer> onPickClick = Callback.createDoNothing();
    public @NotNull Callback<Integer> onItemSelect = Callback.createDoNothing();
    public @NotNull Callback<Integer> onItemDoubleClick = Callback.createDoNothing();
    
    private final boolean _pickAlwaysEnabled;
    private final @NotNull ImageIcon _folderIcon;
    private final @NotNull ImageIcon _fileIcon;
    
    /**
     * Creates new form PickFileFrame
     * @param pickAlwaysEnabled Pick button is enabled always or not.
     *                          If false, button is enabled only when
     *                          something is selected.
     */
    public FilePickerFrame(boolean pickAlwaysEnabled) {
        _pickAlwaysEnabled = pickAlwaysEnabled;
        _folderIcon = new ImageIcon(getClass().getClassLoader().getResource(FOLDER_ICON_PATH));
        _fileIcon = new ImageIcon(getClass().getClassLoader().getResource(FILE_ICON_PATH));
        renderer = new FileSystemEntitiesTableRenderer(_folderIcon, _fileIcon);
        
        initComponents();
        setup();
    }
    
    public int getSelectedIndex() {
        return currentSelectIndex;
    }
    
    public void setCurrentPath(@NotNull String path) {
        pathLabel.setText(path);
        backButton.setEnabled(true);
    }
    
    public void setCurrentPathToRoot() {
        pathLabel.setText(ROOT_PATH);
        backButton.setEnabled(false);
    }
    
    public void setEntitiesData(@NotNull JTableData<FileSystemEntityViewModel> data) {
        tableData = data;
        entitiesTable.setModel(tableData);
        
        deselectAll();
    }
    
    public void deselectAll() {
        entitiesTable.clearSelection();
        
        deselectItem();
    }
    
    public void setDescription(@NotNull String description) {
        setTitle(description);
        
        descriptionLabel.setText(description);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        pathLabel = new javax.swing.JLabel();
        pickButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        entitiesTable = new javax.swing.JTable();
        descriptionLabel = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("Back");
        backButton.setEnabled(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        pathLabel.setText("Root");

        pickButton.setText("Pick");
        pickButton.setEnabled(false);
        pickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickButtonActionPerformed(evt);
            }
        });

        entitiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        entitiesTable.setColumnSelectionAllowed(true);
        entitiesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(entitiesTable);

        descriptionLabel.setText("Description");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pickButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(pathLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pickButton)
                    .addComponent(descriptionLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickButtonActionPerformed
        onPickClick.perform(currentSelectIndex);
    }//GEN-LAST:event_pickButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        onBackClick.perform();
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilePickerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilePickerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilePickerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilePickerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilePickerFrame(false).setVisible(true);
            }
        });
    }
    
    private void setup() {
        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                onQuitClick.perform();
            }
        });
        
        setTitle(TextValue.getText(TextValue.FilePicker_GenericTitle));
        
        entitiesTable.getTableHeader().setUI(null);
        entitiesTable.setDefaultRenderer(EntityInfo.class, renderer);
        
        entitiesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = entitiesTable.rowAtPoint(evt.getPoint());
                int col = entitiesTable.columnAtPoint(evt.getPoint());
                
                if (row >= 0 && col >= 0) {
                    int index = FileSystemEntitiesTableData.indexOf(row, col, entitiesTable.getColumnCount());
                    
                    onClickItem(index);
                    
                    if (evt.getClickCount() == 2) {
                        onDoubleClickItem(index);
                    }
                }
            }
        });
        
        if (_pickAlwaysEnabled) {
            pickButton.setEnabled(true);
        }
    }
    
    private void onClickItem(int index) {
        if (currentSelectIndex != index) {
            selectItem(index);
            onItemSelect.perform(index);
        }
    }
    
    private void onDoubleClickItem(int index) {
        onItemDoubleClick.perform(index);
    }
    
    private void selectItem(int index) {
        currentSelectIndex = index;
        
        if (index >= 0) {
            pickButton.setEnabled(true);
        }
    }
    
    private void deselectItem() {
        currentSelectIndex = -1;
        
        if (!_pickAlwaysEnabled) {
            pickButton.setEnabled(false);
        }
    }
    
    private FileSystemEntitiesTableRenderer renderer;
    private JTableData<FileSystemEntityViewModel> tableData;
    private int currentSelectIndex = -1;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTable entitiesTable;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JButton pickButton;
    // End of variables declaration//GEN-END:variables

    // # BaseView
    
    @Override
    public void reloadData() {
        
    }

    @Override
    public void navigateBack() {
        
    }

    @Override
    public void onStart() {
        setVisible(true);
    }

    @Override
    public void onSuspended() {
        
    }

    @Override
    public void onResume() {
        
    }

    @Override
    public void onTerminate() {
        setVisible(false);
    }
    
    @Override
    public JFrame asFrame() {
        return this;
    }

    @Override
    public void open() {
        setVisible(true);
    }
}
