/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quickchatter.ui.view;

import javax.swing.JFrame;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jetbrains.annotations.NotNull;
import quickchatter.ui.TextValue;
import quickchatter.ui.listdata.JListData;
import quickchatter.utilities.Callback;
import quickchatter.utilities.Logger;
import quickchatter.utilities.SimpleCallback;

public class ConnectFrame extends javax.swing.JFrame implements BaseView.Whole {
    // Callbacks
    public @NotNull SimpleCallback onNavigateBack = SimpleCallback.createDoNothing();
    public @NotNull SimpleCallback onScanStart = SimpleCallback.createDoNothing();
    public @NotNull SimpleCallback onScanEnd = SimpleCallback.createDoNothing();
    public @NotNull Callback<Integer> onSelectItem = Callback.createDoNothing();
    public @NotNull Callback<Integer> onClickItem = Callback.createDoNothing();
    public @NotNull Callback<Integer> onDoubleClickItem = Callback.createDoNothing();

    /**
     * Creates new form ConnectForm
     */
    public ConnectFrame() {
        initComponents();
        setup();
    }
    
    public boolean isScanON() {
        return scanButton.isSelected();
    }
    
    public void startScan() {
        if (isScanON()) {
            return;
        }
        
        startScan(true);
    }
    
    public void stopScan() {
        if (!isScanON()) {
            return;
        }
        
        stopScan(true);
    }
    
    public void updateClientsListData(JListData<String> data) {
        resetSelectIndex();
        
        clientsList.setModel(data);
    }
    
    private void startScan(boolean setSelection) {
        scanButton.setText(TextValue.getText(TextValue.ScreenConnect_ScanON));
        
        if (setSelection) {
            scanButton.setSelected(true);
        }
        
        onScanStart.perform();
    }
    
    private void stopScan(boolean setSelection) {
        scanButton.setText(TextValue.getText(TextValue.ScreenConnect_ScanOFF));
        
        if (setSelection) {
            scanButton.setSelected(false);
        }
        
        onScanEnd.perform();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scanButton = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientsList = new javax.swing.JList<>();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        scanButton.setText("Scan");

        clientsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        clientsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(clientsList);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                        .addComponent(backButton))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scanButton)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        onNavigateBack.perform();
    }//GEN-LAST:event_backButtonActionPerformed

    private void clientsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientsListMouseClicked
        int selectedIndex = clientsList.getSelectedIndex();
        
        if (_selectedIndex != selectedIndex) {
            onSelectItem(selectedIndex);
        }
        
        // Click event
        if (evt.getClickCount() == 1)
        {
            onClickItem(_selectedIndex);
        }
        
        // Double click event
        if (evt.getClickCount() == 2)
        {
            onDoubleClickItem(_selectedIndex);
        }
    }//GEN-LAST:event_clientsListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConnectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConnectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConnectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConnectFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectFrame().setVisible(true);
            }
        });
    }
    
    private void setup() {
        ViewUtilities.setAppIconForFrame(this);
        
        this.setTitle(TextValue.getText(TextValue.ScreenConnect_Title));
        
        scanButton.setText(TextValue.getText(TextValue.ScreenConnect_ScanOFF));
        scanButton.setSelected(false);
        
        scanButton.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent event) {
                if (scanButton.isSelected()){
                    startScan(false);
                } else {
                    stopScan(false);
                }
            }
        });
    }
    
    // # BaseView
    
    @Override
    public void onStart() {
        setVisible(true);
    }

    @Override
    public void onSuspended() {
        
    }

    @Override
    public void onResume() {
        
    }

    @Override
    public void onTerminate() {
        setVisible(false);
    }
    
    @Override
    public void navigateBack() {
        
    }

    @Override
    public void reloadData() {
        
    }
    
    @Override
    public @NotNull JFrame asFrame() {
        return this;
    }
    
    @Override
    public void open() {
        setVisible(true);
    }
    
    // # Private
    
    private void resetSelectIndex() {
        _selectedIndex = -1;
    }
    
    private void onSelectItem(int index) {
        _selectedIndex = index;
        
        onSelectItem.perform(index);
    }
    
    private void onClickItem(int index) {
        _selectedIndex = index;
        
        onClickItem.perform(index);
    }
    
    private void onDoubleClickItem(int index) {
        _selectedIndex = index;
        
        onDoubleClickItem.perform(index);
    }
    
    private int _selectedIndex = -1;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JList<String> clientsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton scanButton;
    // End of variables declaration//GEN-END:variables
}
